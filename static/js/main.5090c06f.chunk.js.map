{"version":3,"sources":["components/ContactPicker.js","components/AppointmentForm.js","components/Tile.js","components/TileList.js","containers/AppointmentsPage.js","components/ContactForm.js","containers/ContactsPage.js","App.js","reportWebVitals.js","index.js"],"names":["ContactPicker","name","contacts","handleChange","options","map","contact","value","phone","unshift","defaultValue","onChange","AppointmentForm","title","setTitle","setContact","date","setDate","time","setTime","handleSubmit","onSubmit","type","e","target","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","Tile","dataItem","tileElements","Object","values","idx","className","TileList","tiles","data","AppointmentsPage","appointments","addAppointment","useState","preventDefault","ContactForm","contactInfo","pattern","email","ContactsPage","props","setContactInfo","error","setError","useEffect","filter","length","style","color","prevInfo","newContact","console","log","addContact","App","setContacts","setAppointments","ROUTES","to","activeClassName","path","prevContacts","newAppointment","prevAppointments","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sOAEaA,EAAgB,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,aACrCC,EAAUF,EAASG,KAAI,SAAAC,GACzB,OAAO,wBAA4BC,MAAOD,EAAQL,KAA3C,SAAkDK,EAAQL,MAA7CK,EAAQE,UAGlC,OADEJ,EAAQK,QAAQ,wBAAiBF,MAAM,GAAvB,wBAAY,OAE5B,8BACI,6CAEA,wBAAQN,KAAMA,EAAMS,aAAa,GAAGC,SAAUR,EAA9C,SACKC,UCTAQ,EAAkB,SAAC,GAWzB,IAVLV,EAUI,EAVJA,SACAW,EASI,EATJA,MACAC,EAQI,EARJA,SACAR,EAOI,EAPJA,QACAS,EAMI,EANJA,WACAC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,QACAC,EACI,EADJA,aASA,OACE,uBAAMC,SAAUD,EAAhB,UACI,2CAEI,uBAAOE,KAAK,OAAOrB,KAAK,QAAQM,MAAOM,EAAOF,SAAU,SAACY,GAAD,OAAOT,EAASS,EAAEC,OAAOjB,aAErF,0CAEI,uBAAOe,KAAK,OAAOrB,KAAK,OAAOM,MAAOS,EAAMS,IAf/B,WAAO,IAAD,GACA,IAAIC,MAC5BC,mBAAmB,SACnBC,MAAM,KAHkB,mBACpBC,EADoB,KACbC,EADa,KACRC,EADQ,KAI3B,MAAM,GAAN,OAAUA,EAAV,YAAkBF,EAAMG,SAAS,EAAG,KAApC,YAA4CF,EAAIE,SAAS,EAAG,MAWHC,GAAkBtB,SAAU,SAACY,GAAD,OAAON,EAAQM,EAAEC,OAAOjB,aAEzG,0CAEI,uBAAOe,KAAK,OAAOrB,KAAK,OAAOM,MAAOW,EAAMP,SAAU,SAACY,GAAD,OAAOJ,EAAQI,EAAEC,OAAOjB,aAElF,cAAC,EAAD,CAAeN,KAAK,UAAUM,MAAOD,EAASH,aAAc,SAACoB,GAAD,OAAOR,EAAWQ,EAAEC,OAAOjB,QAAQL,SAAUA,IACzG,uBAAOoB,KAAK,SAASf,MAAM,wBCnCtB2B,EAAO,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACZC,EAAeC,OAAOC,OAAOH,GAAU9B,KAAI,SAACE,EAAOgC,GACrD,OAAO,mBAAaC,UAAiB,IAAND,EAAU,aAAe,OAAjD,SAA0DhC,GAAlDgC,MAErB,OACE,qBAAKC,UAAU,iBAAf,SACGJ,KCLMK,EAAW,SAAC,GAAY,IAC3BC,EAD0B,EAAVC,KACHtC,KAAI,SAAC8B,EAAUI,GAC9B,OAAO,cAAC,EAAD,CAAgBJ,SAAUA,GAAfI,MAExB,OACE,8BACKG,KCLIE,EAAmB,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,aAAc3C,EAA8B,EAA9BA,SAAU4C,EAAoB,EAApBA,eAAoB,EAKhDC,mBAAS,IALuC,mBAKnElC,EALmE,KAK5DC,EAL4D,OAM5CiC,mBAAS,IANmC,mBAMnEzC,EANmE,KAM1DS,EAN0D,OAOlDgC,mBAAS,IAPyC,mBAOnE/B,EAPmE,KAO7DC,EAP6D,OAQlD8B,mBAAS,IARyC,mBAQnE7B,EARmE,KAQ7DC,EAR6D,KA4B5E,OACE,gCACE,oCACE,iDACA,cAAC,EAAD,CACIN,MAAOA,EACPP,QAASA,EACTU,KAAMA,EACNE,KAAMA,EACNJ,SAAUA,EACVC,WAAYA,EACZE,QAASA,EACTE,QAASA,EACTjB,SAAUA,EACVkB,aAhCW,SAACG,GACpBA,EAAEyB,iBAUFF,EANuB,CACnBjC,MAAOA,EACPP,QAASA,EACTU,KAAMA,EACNE,KAAMA,IAGVJ,EAAS,IACTC,EAAW,IACXI,EAAQ,IACRF,EAAQ,UAoBN,uBACA,oCACE,8CACA,cAAC,EAAD,CAAU0B,KAAME,W,gBClDXI,EAAc,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,YAAa/C,EAAgC,EAAhCA,aAAciB,EAAkB,EAAlBA,aACtD,OACE,uBAAMC,SAAUD,EAAhB,UACM,0CAEE,uBAAOE,KAAK,OAAOrB,KAAK,OAAOM,MAAO2C,EAAYjD,KAAMU,SAAUR,OAEpE,2CAEE,uBAAOmB,KAAK,MAAMrB,KAAK,QAAQM,MAAO2C,EAAY1C,MAAOG,SAAUR,EAC/DgD,QAAQ,8HAGd,2CAEE,uBAAO7B,KAAK,QAAQrB,KAAK,QAAQM,MAAO2C,EAAYE,MAAOzC,SAAUR,OAEvE,uBAAOmB,KAAK,SAASf,MAAM,eCfxB8C,EAAe,SAACC,GAAU,MAKCP,mBAAS,CAC7C9C,KAAM,GACNO,MAAO,GACP4C,MAAO,KAR4B,mBAK9BF,EAL8B,KAKjBK,EALiB,OAUXR,oBAAS,GAVE,mBAU9BS,EAV8B,KAUvBC,EAVuB,KAkDrC,OALAC,qBAAU,WACRD,GAAS,GACuF,IAA7EH,EAAMpD,SAASyD,QAAO,SAAArD,GAAO,OAAIA,EAAQL,OAAOiD,EAAYjD,QAAM2D,QACrEH,GAAS,KACxB,CAACP,EAAYjD,KAAMqD,EAAMpD,WAE1B,gCACE,oCACE,6CACCsD,GAAS,mBAAGK,MAAO,CAACC,MAAO,OAAlB,0BACV,cAAC,EAAD,CAAaZ,YAAaA,EAAa/C,aA3CxB,SAAC,GAAc,IAAbqB,EAAY,EAAZA,OACdvB,EAAeuB,EAAfvB,KAAMM,EAASiB,EAATjB,MACbgD,GAAe,SAACQ,GACd,OAAO,2BACFA,GADL,kBAEG9D,EAAOM,QAsC2Da,aAjCpD,SAACG,GACpBA,EAAEyB,iBAMF,IAAMgB,EAAad,EACnBe,QAAQC,IAAIF,GACoF,IAA7EV,EAAMpD,SAASyD,QAAO,SAAArD,GAAO,OAAIA,EAAQL,OAAOiD,EAAYjD,QAAM2D,SAErFN,EAAMa,WAAWH,GACjBT,EAAe,CACbtD,KAAM,GACNO,MAAO,GACP4C,MAAO,YAoBP,uBACA,oCACE,0CACA,cAAC,EAAD,CAAUT,KAAMW,EAAMpD,kBCIfkE,MA9Df,WAAe,MAKmBrB,mBAAS,IAL5B,mBAKN7C,EALM,KAKImE,EALJ,OAM2BtB,mBAAS,IANpC,mBAMNF,EANM,KAMQyB,EANR,KAQPC,EACM,YADNA,EAEU,gBAuBhB,OACE,cAAC,IAAD,UACA,qCACE,gCACE,cAAC,IAAD,CAASC,GAAID,EAAiBE,gBAAgB,SAA9C,sBAGA,cAAC,IAAD,CAASD,GAAID,EAAqBE,gBAAgB,SAAlD,6BAIF,+BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAMH,EAAb,SAEE,cAAC,EAAD,CAAcrE,SAAUA,EAAUiE,WA/BzB,SAAC,GAA0B,IACtCH,EAAa,CACjB/D,KAFyC,EAAxBA,KAEXO,MAFmC,EAAlBA,MAEV4C,MAF4B,EAAXA,OAIhCiB,GAAY,SAACM,GACX,MAAM,GAAN,mBAAWA,GAAX,CAAyBX,YA4BrB,cAAC,IAAD,CAAOU,KAAMH,EAAb,SAEE,cAAC,EAAD,CAAkB1B,aAAcA,EAAc3C,SAAUA,EAAU4C,eA3BrD,SAAC,GAAkC,IAClD8B,EAAiB,CACrB/D,MAFqD,EAAhCA,MAEdP,QAF8C,EAAzBA,QAEZU,KAFqC,EAAhBA,KAEfE,KAF+B,EAAVA,MAI7CoD,GAAgB,SAACO,GACf,MAAM,GAAN,mBAAWA,GAAX,CAA6BD,uBCxBpBE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5090c06f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const ContactPicker = ({name, contacts, handleChange}) => {\n    const options = contacts.map(contact => {\n        return <option key={contact.phone} value={contact.name}>{contact.name}</option>\n    })\n    options.unshift(<option key=\"-1\" value=\"\">Choose here</option>)\n  return (\n    <div>\n        <label>\n        Contact:\n        <select name={name} defaultValue=\"\" onChange={handleChange}>\n            {options}\n        </select>\n        </label>\n    </div>\n  );\n};","import React from \"react\";\nimport {ContactPicker} from \"./ContactPicker\"\n\nexport const AppointmentForm = ({\n  contacts,\n  title,\n  setTitle,\n  contact,\n  setContact,\n  date,\n  setDate,\n  time,\n  setTime,\n  handleSubmit\n}) => {\n  const getTodayString = () => {\n    const [month, day, year] = new Date()\n      .toLocaleDateString(\"en-US\")\n      .split(\"/\");\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n        <label>\n            Title:\n            <input type=\"text\" name=\"title\" value={title} onChange={(e) => setTitle(e.target.value)}/>\n        </label>\n        <label>\n            Date:\n            <input type=\"date\" name=\"date\" value={date} min={getTodayString()} onChange={(e) => setDate(e.target.value)}/>\n        </label>\n        <label>\n            Time:\n            <input type=\"time\" name=\"time\" value={time} onChange={(e) => setTime(e.target.value)}/>\n        </label>\n        <ContactPicker name=\"contact\" value={contact} handleChange={(e) => setContact(e.target.value)} contacts={contacts} />\n        <input type=\"submit\" value=\"Add appointment\" />\n    </form>   );\n};\n","import React from \"react\";\n\nexport const Tile = ({dataItem}) => {\n    const tileElements = Object.values(dataItem).map((value, idx) => {\n        return <p key={idx} className={idx===0 ? \"tile-title\" : \"tile\"}>{value}</p>\n    })\n  return (\n    <div className=\"tile-container\">\n      {tileElements}\n    </div>\n  );\n};","import React from \"react\";\nimport {Tile} from \"./Tile\"\n\nexport const TileList = ({data}) => {\n    const tiles = data.map((dataItem, idx) => {\n        return <Tile key={idx} dataItem={dataItem} />\n    })\n  return (\n    <div>\n        {tiles}\n    </div>\n  );\n};","import React, {useState} from \"react\";\nimport {AppointmentForm} from \"../components/AppointmentForm\"\nimport {TileList} from '../components/TileList'\n\nexport const AppointmentsPage = ({appointments, contacts, addAppointment}) => {\n  /*\n  Define state variables for \n  appointment info\n  */\n    const [title, setTitle] = useState(\"\")\n    const [contact, setContact] = useState(\"\")\n    const [date, setDate] = useState(\"\")\n    const [time, setTime] = useState(\"\")\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    /*\n    Add contact info and clear data  \n    */\n    const newAppointment = {\n        title: title,\n        contact: contact,\n        date: date,\n        time: time\n    }\n    addAppointment(newAppointment)\n    setTitle(\"\")\n    setContact(\"\")\n    setTime(\"\")\n    setDate(\"\")\n  };\n\n  return (\n    <div>\n      <section>\n        <h2>Add Appointment</h2>\n        <AppointmentForm \n            title={title}\n            contact={contact}\n            date={date}\n            time={time}\n            setTitle={setTitle}\n            setContact={setContact}\n            setDate={setDate}\n            setTime={setTime}\n            contacts={contacts}\n            handleSubmit={handleSubmit}\n        />\n      </section>\n      <hr />\n      <section>\n        <h2>Appointments</h2>\n        <TileList data={appointments} />\n      </section>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const ContactForm = ({contactInfo, handleChange, handleSubmit}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n          <label>\n            Name:\n            <input type=\"text\" name=\"name\" value={contactInfo.name} onChange={handleChange}/>\n          </label>\n          <label>\n            Phone:\n            <input type=\"tel\" name=\"phone\" value={contactInfo.phone} onChange={handleChange}\n                pattern=\"^\\s*\\(?(020[7,8]{1}\\)?[ ]?[1-9]{1}[0-9{2}[ ]?[0-9]{4})|(0[1-8]{1}[0-9]{3}\\)?[ ]?[1-9]{1}[0-9]{2}[ ]?[0-9]{3})\\s*$\"\n            />\n          </label>\n          <label>\n            Email:\n            <input type=\"email\" name=\"email\" value={contactInfo.email} onChange={handleChange}/>\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n    </form> \n  );\n};","import React, {useState, useEffect} from \"react\";\nimport {TileList} from '../components/TileList'\nimport {ContactForm} from '../components/ContactForm'\n\nexport const ContactsPage = (props) => {\n  /*\n  Define state variables for \n  contact info and duplicate check\n  */\n  const [contactInfo, setContactInfo] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\"\n  })\n  const [error, setError] = useState(false)\n\n  const handleChange = ({target}) => {\n    const {name, value} = target\n    setContactInfo((prevInfo) => {\n      return {\n        ...prevInfo,\n        [name]: value,\n        }\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    /*\n    Add contact info and clear data\n    if the contact name is not a duplicate\n    */\n  //  console.log(e.target)\n    const newContact = contactInfo\n    console.log(newContact)\n    const nameExists = props.contacts.filter(contact => contact.name===contactInfo.name).length !== 0 \n    if (nameExists) return \n    props.addContact(newContact)\n    setContactInfo({\n      name: \"\",\n      phone: \"\",\n      email: \"\"\n    })\n  };\n\n  /*\n  Using hooks, check for contact name in the \n  contacts array variable in props\n  */\n  useEffect(() => {\n    setError(false)\n    const nameExists = props.contacts.filter(contact => contact.name===contactInfo.name).length !== 0 \n    if (nameExists) setError(true) \n  }, [contactInfo.name, props.contacts])\n  return (\n    <div>\n      <section>\n        <h2>Add Contact</h2>\n        {error && <p style={{color: \"red\"}}>Name exists!</p>}\n        <ContactForm contactInfo={contactInfo} handleChange={handleChange} handleSubmit={handleSubmit}/>\n      </section>\n      <hr />\n      <section>\n        <h2>Contacts</h2>\n        <TileList data={props.contacts}/>\n      </section>\n    </div>\n  );\n};\n","import React, {useState} from \"react\";\nimport { Switch, Route, HashRouter as Router, NavLink } from \"react-router-dom\";\n\nimport { AppointmentsPage } from \"./containers/AppointmentsPage\";\nimport { ContactsPage } from \"./containers/ContactsPage\";\n\nfunction App() {\n  /*\n  Define state variables for \n  contacts and appointments \n  */\n  const [contacts, setContacts] = useState([])\n  const [appointments, setAppointments] = useState([])\n\n  const ROUTES = {\n    CONTACTS: \"/contacts\",\n    APPOINTMENTS: \"/appointments\",\n  };\n\n  /*\n  Implement functions to add data to\n  contacts and appointments\n  */\n  const addContact = ({name, phone, email}) => {\n    const newContact = {\n      name, phone, email\n    }\n    setContacts((prevContacts) => {\n      return [...prevContacts, newContact]\n    })\n  }\n  const addAppointment = ({title, contact, date, time}) => {\n    const newAppointment = {\n      title, contact, date, time\n    }\n    setAppointments((prevAppointments) => {\n      return [...prevAppointments, newAppointment]\n    })\n  }\n  return (\n    <Router>\n    <>\n      <nav>\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\n          Contacts\n        </NavLink>\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\n          Appointments\n        </NavLink>\n      </nav>\n      <main>\n        <Switch>\n          <Route path={ROUTES.CONTACTS}>\n            {/* Add props to ContactsPage */}\n            <ContactsPage contacts={contacts} addContact={addContact}/>\n          </Route>\n          <Route path={ROUTES.APPOINTMENTS}>\n            {/* Add props to AppointmentsPage */}\n            <AppointmentsPage appointments={appointments} contacts={contacts} addAppointment={addAppointment}/>\n          </Route>\n        </Switch>\n      </main>\n    </>\n    </Router>\n\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}